#!/bin/sh
# this is the path to the mandatory philo executable
P="../philo/philo"
# this is the path to the bonus philo executable
PB="../philo_bonus/philo_bonus"

ft_check_executables()
{
	# check executables existence
	if ! [ -e $P ]
	then
		printf "'$P' executable not found\n"
		printf "Try with 'make -C ../philo'\n"
		exit 1
	elif [ $1 -eq 1 ] && ! [ -e $PB ]
	then
		printf "'$PB' executable not found\n"
		printf "Try with 'make -C ../philo_bonus'\n"
		exit 1
	fi
	# check executables permissions
	if [ "$(uname)" = "Linux" ] && ! [ $(stat -c %A $P | tr -cd x | wc -c) -eq 3 ]
	then
		printf "'$P' executable must have execution permissions\n"
		printf "Try with 'chmod +x $P'\n"
		exit 1
	elif [ $1 -eq 1 ] && [ "$(uname)" = "Linux" ] && ! [ $(stat -c %A $PB | tr -cd x | wc -c) -eq 3 ]
	then
		printf "'$PB' executable must have execution permissions\n"
		printf "Try with 'chmod +x $PB'\n"
		exit 1
	elif ! [ "$(uname)" = "Linux" ] && ! [ $(stat $P | awk '{print $3}' | tr -cd x | wc -c) -eq 3 ]
	then
		printf "'$P' executable must have execution permissions\n"
		printf "Try with 'chmod +x $P'\n"
		exit 1
	elif [ $1 -eq 1 ] && ! [ "$(uname)" = "Linux" ] && ! [ $(stat $PB | awk '{print $3}' | tr -cd x | wc -c) -eq 3 ]
	then
		printf "'$PB' executable must have execution permissions\n"
		printf "Try with 'chmod +x $PB'\n"
		exit 1
	fi
}

# $1 == TEST number
# $2 == Success or Failed (1 for success && 0 for fail)
ft_print_status()
{
	if [ $2 -eq 1 ]; then
		printf "$PURPLE TEST $1:$GREEN Success!$RESET\n"
	elif [ $(echo "abcdefgh" | tr -cd "$1" | wc -c) -gt 0 ]; then
		printf "$PURPLE TEST $1:$RED Fail!$RESET\n"
	elif [ $2 -eq 0 ] && [ $1 -lt 7 ]; then
		printf "$PURPLE TEST $1:$RED Fail!$RESET\n"
	elif [ $2 -eq 0 ] && [ $1 -gt 6 ]; then
		printf "$PURPLE TEST $1:$YELLOW Fail!$RESET\n"
	else
		printf "Error at ft_print_status with [$1] [$2] as input\n"
	fi
}

# ./philo
ft_test_a()
{
	file="./loga"
	status=1
	$($BUFF $1 >$file 2>&1 &)
	sleep 1
	if ! [ "$(pgrep philo)" = "" ]; then
		status=0
		kill -kill $(pgrep philo) 2>/dev/null
	elif [ $(cat $file | grep "fault" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=0
	elif [ $(cat $file | grep "rror" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=1
	elif [ $(cat $file | wc -l | awk '{print $1}') -gt 2 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status "a" $status
}

# ./philo 4 410 200
ft_test_b()
{
	file="./logb"
	status=1
	$($BUFF $1 4 410 200 >$file 2>&1 &)
	sleep 1
	if ! [ "$(pgrep philo)" = "" ]; then
		status=0
		kill -kill $(pgrep philo) 2>/dev/null
	elif [ $(cat $file | grep "fault" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=0
	elif [ $(cat $file | grep "Error" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=1
	elif [ $(cat $file | wc -l | awk '{print $1}') -gt 2 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status "b" $status
}

# ./philo 4 410 200 200 3 1
ft_test_c()
{
	file="./logc"
	status=1
	$($BUFF $1 4 410 200 200 3 1 >$file 2>&1 &)
	sleep 1
	if ! [ "$(pgrep philo)" = "" ]; then
		status=0
		kill -kill $(pgrep philo) 2>/dev/null
	elif [ $(cat $file | grep "fault" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=0
	elif [ $(cat $file | grep "Error" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=1
	elif [ $(cat $file | wc -l | awk '{print $1}') -gt 2 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status "c" $status
}

# ./philo a 410 200 200
ft_test_d()
{
	file="./logd"
	status=1
	$($BUFF $1 a 410 200 200 >$file 2>&1 &)
	sleep 1
	if ! [ "$(pgrep philo)" = "" ]; then
		status=0
		kill -kill $(pgrep philo) 2>/dev/null
	elif [ $(cat $file | grep "fault" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=0
	elif [ $(cat $file | grep "Error" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=1
	elif [ $(cat $file | wc -l | awk '{print $1}') -gt 2 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status "d" $status
}

# ./philo 4 410 200 200 a
ft_test_e()
{
	file="./loge"
	status=1
	$($BUFF $1 4 410 200 200 a >$file 2>&1 &)
	sleep 1
	if ! [ "$(pgrep philo)" = "" ]; then
		status=0
		kill -kill $(pgrep philo) 2>/dev/null
	elif [ $(cat $file | grep "fault" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=0
	elif [ $(cat $file | grep "Error" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=1
	elif [ $(cat $file | wc -l | awk '{print $1}') -gt 2 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status "e" $status
}

# ./philo -4 410 200 200
ft_test_f()
{
	file="./logf"
	status=1
	$($BUFF $1 -4 410 200 200 >$file 2>&1 &)
	sleep 1
	if ! [ "$(pgrep philo)" = "" ]; then
		status=0
		kill -kill $(pgrep philo) 2>/dev/null
	elif [ $(cat $file | grep "fault" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=0
	elif [ $(cat $file | grep "Error" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=1
	elif [ $(cat $file | wc -l | awk '{print $1}') -gt 2 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status "f" $status
}

# ./philo 4 410 -200 200
ft_test_g()
{
	file="./logg"
	status=1
	$($BUFF $1 4 410 -200 200 >$file 2>&1 &)
	sleep 1
	if ! [ "$(pgrep philo)" = "" ]; then
		status=0
		kill -kill $(pgrep philo) 2>/dev/null
	elif [ $(cat $file | grep "fault" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=0
	elif [ $(cat $file | grep "Error" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=1
	elif [ $(cat $file | wc -l | awk '{print $1}') -gt 2 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status "g" $status
}

# ./philo 4 410 200 200 -3
ft_test_h()
{
	file="./logh"
	status=1
	$($BUFF $1 4 410 200 200 -3 >$file 2>&1 &)
	sleep 1
	if ! [ "$(pgrep philo)" = "" ]; then
		status=0
		kill -kill $(pgrep philo) 2>/dev/null
	elif [ $(cat $file | grep "fault" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=0
	elif [ $(cat $file | grep "Error" | wc -l | awk '{print $1}') -gt 0 ]; then
		status=1
	elif [ $(cat $file | wc -l | awk '{print $1}') -gt 2 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status "h" $status
}

# ./philo 4 410 200 200 3
ft_test_one()
{
	file="./log1"
	status=1
	$($BUFF $1 4 410 200 200 3 >$file &)
	sleep 3
	if ! [ "$(pgrep philo)" = "" ]; then
		kill -kill $(pgrep philo)
	fi
	for i in $(seq 1 4); do
		eat_times=$(grep "$i is eating" $file | wc -l | awk '{print $1}')
		if [ "$eat_times" -lt 3 ]; then
			status=0
		fi
	done
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status 1 $status
}

# ./philo 4 310 200 100
ft_test_two()
{
	file="./log2"
	status=0
	$($BUFF $1 4 310 200 100 >$file &)
	sleep 3
	if ! [ "$(pgrep philo)" = "" ]; then
		kill -kill $(pgrep philo)
	fi
	if ! [ "$(grep 'died' $file | wc -l | awk '{print $1}')" = "" ] && [ $(grep 'died' $file | wc -l | awk '{print $1}') -eq 1 ]; then
		status=1
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status 2 $status
}

# ./philo 5 610 200 200
ft_test_three()
{
	file="./log3"
	status=1
	i=120
	$($BUFF $1 5 610 200 200 >$file &)
	while [ $i -gt 0 ]; do
		printf "\033[1K\r$CYAN Executing your program for$PURPLE $i$CYAN seconds, please wait...$RESET"
		sleep 1
		i=$((i - 1))
		if [ "$(pgrep philo)" = "" ]; then
			status=0
			break
		fi
	done
	printf "\033[1K\r"
	kill -kill $(pgrep philo) 2>/dev/null
	if ! [ "$(grep 'died' $file)" = "" ] || [ "$(cat $file | tail -1)" = "" ]; then
		status=0
	elif [ $(cat $file | tail -1 | awk '{print $1}') -lt 100000 ]; then
		status=0;
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status 3 $status
}

# ./philo 5 800 200 200 5
ft_test_four()
{
	file="./log4"
	status=1
	$($BUFF $1 5 800 200 200 5 >$file &)
	sleep 3
	if ! [ "$(pgrep philo)" = "" ]; then
		kill -kill $(pgrep philo)
	fi
	for i in $(seq 1 4); do
		eat_times=$(cat $file | grep "$i is eating" | wc -l | awk '{print $1}')
		if [ "$eat_times" -lt 5 ]; then
			status=0
		fi
	done
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status 4 $status
}

# ./philo 1 410 200 200
ft_test_five()
{
	file="./log5"
	status=1
	$($BUFF $1 1 400 200 200 >$file &)
	sleep 2
	if ! [ "$(pgrep philo)" = "" ]; then
		kill -kill $(pgrep philo)
		status=0
	fi
	output=$(cat $file | tail -1 | awk '{print $1}')
	if [ "$output" = "" ] || [ $output -gt 410 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status 5 $status
}

# ./philo 2 400 200 200
ft_test_six()
{
	file="./log6"
	status=1
	$($BUFF $1 2 400 200 200 1>$file &)
	sleep 3
	if ! [ "$(pgrep philo)" = "" ]; then
		kill -kill $(pgrep philo)
		status=0
	fi
	output=$(cat $file | tail -1 | awk '{print $1}')
	if [ "$output" = "" ] || [ $output -gt 410 ] || ! [ "$(cat $file | tail -1 | awk '{print $3}')" = "died" ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status 6 $status
}

# ./philo 16 410 200 200
ft_test_seven()
{
	file="./log7"
	status=1
	i=0
	$($BUFF $1 16 410 200 200 1>$file &)
	while [ $i -lt 120 ]; do
		printf "\033[1K\r$CYAN Executing your program for$PURPLE %d$CYAN seconds, please wait...$RESET" $((120 - i))
		sleep 1
		i=$((i + 1))
		if [ "$(pgrep philo)" = "" ]; then
			status=0
			break
		fi
	done
	printf "\033[1K\r"
	kill -kill $(pgrep philo) 2>/dev/null
	if ! [ "$(grep 'died' $file)" = "" ] || [ $(cat $file | tail -1 | awk '{print $1}') -lt 100000 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status 7 $status
}

# ./philo 50 410 200 200
ft_test_eight()
{
	file="./log8"
	status=1
	i=60
	$($BUFF $1 50 410 200 200 1>$file &)
	while [ $i -gt 0 ]; do
		printf "\033[1K\r$CYAN Executing your program for$PURPLE $i$CYAN seconds, please wait...$RESET"
		sleep 1
		i=$((i - 1))
		if [ "$(pgrep philo)" = "" ]; then
			status=0
			break
		fi
	done
	printf "\033[1K\r"
	kill -kill $(pgrep philo) 2>/dev/null
	if ! [ "$(grep 'died' $file)" = "" ] || [ $(cat $file | tail -1 | awk '{print $1}') -lt 50000 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status 8 $status
}

# ./philo 100 410 200 200
ft_test_nine()
{
	file="./log9"
	status=1
	i=60
	$($BUFF $1 100 410 200 200 1>$file &)
	while [ $i -gt 0 ]; do
		printf "\033[1K\r$CYAN Executing your program for$PURPLE $i$CYAN seconds, please wait...$RESET"
		sleep 1
		i=$((i - 1))
		if [ "$(pgrep philo)" = "" ]; then
			status=0
			break
		fi
	done
	printf "\033[1K\r"
	kill -kill $(pgrep philo) 2>/dev/null
	if ! [ "$(grep 'died' $file)" = "" ] || [ $(cat $file | tail -1 | awk '{print $1}') -lt 50000 ]; then
		status=0
	fi
	if [ $status -eq 1 ]; then
		rm $file 2>/dev/null
	fi
	ft_print_status 9 $status
}

ft_do_specific()
{
	case $1 in
		a) ft_test_a $2 ;;
		b) ft_test_b $2 ;;
		c) ft_test_c $2 ;;
		d) ft_test_d $2 ;;
		e) ft_test_e $2 ;;
		f) ft_test_f $2 ;;
		g) ft_test_g $2 ;;
		h) ft_test_h $2 ;;
		1) ft_test_one $2 ;;
		2) ft_test_two $2 ;;
		3) ft_test_three $2 ;;
		4) ft_test_four $2 ;;
		5) ft_test_five $2 ;;
		6) ft_test_six $2 ;;
		7) ft_test_seven $2 ;;
		8) ft_test_eight $2 ;;
		9) ft_test_nine $2 ;;
		*)
			printf "Invalid number try in range 1-9\n"
			exit 1
		;;
	esac
}

ft_all()
{
	printf "To execute all the$YELLOW tests$RESET you'll need to wait at least$GREEN 6$RESET minutes\n"
	printf "While executing the$YELLOW tests$RESET don't launch other programs$CYAN otherwise$RESET\n"
	printf "you'll get$RED false$RESET results, so please be patient and$GREEN relax$RESET.\n"
	printf "If you need to lauch a specific$YELLOW test$RESET you can add its number\n"
	printf "after the option m, just like this:\n"
	printf "	$PURPLE./tester$RESET$BLUE m$RESET$GREEN 4$RESET\n"
	printf "	$PURPLE./tester$RESET$BLUE m$RESET$GREEN f\n"
	printf "$CYAN Testing some invalid input...$RESET\n"
	ft_test_a $1
	ft_test_b $1
	ft_test_c $1
	ft_test_d $1
	ft_test_e $1
	ft_test_f $1
	ft_test_g $1
	ft_test_h $1
	if [ "$1" = "$P" ]; then
		printf "$CYAN Testing mandatory part...$RESET\n"
	else
		printf "$CYAN Testing bonus part...$RESET\n"
	fi
	ft_test_one $1
	ft_test_two $1
	ft_test_three $1
	ft_test_four $1
	ft_test_five $1
	ft_test_six $1
	printf "$CYAN And now, some stress tests...$RESET\n"
	ft_test_seven $1
	ft_test_eight $1
	ft_test_nine $1
}

stdbuf echo ciao >/dev/null 2>/dev/null
if [ $? -eq 0 ]; then
	BUFF="stdbuf -oL -eL"
else
	BUFF=""
fi

# check shell that executed the script
shell_name=$(ps -p $$ -o command | tail -1 | awk '{print $1}')
slashes=$(($(echo $shell_name | tr -cd / | wc -c | awk '{print $1}') + 1))
shell_name=$(echo $shell_name | cut -d/ -f $slashes)

# set colors
if [ $shell_name = "sh" ] || [ $shell_name = "zsh" ]
then
	BLUE="\033[38;5;21m"
	CYAN="\033[38;5;81m"
	GREEN="\033[38;5;40m"
	ORANGE="\033[38;5;202m"
	PURPLE="\033[38;5;105m"
	RED="\033[38;5;124m"
	WHITE="\033[38;5;231m"
	YELLOW="\033[38;5;226m"
	RESET="\033[0m"
	MC="\033[37m"
else
	BLUE=""
	CYAN=""
	GREEN=""
	ORANGE=""
	PURPLE=""
	RED=""
	WHITE=""
	YELLOW=""
	RESET=""
	MC=""
fi

case $1 in
	h|-h|--help)
		echo "PHILOSOPHERS TESTER"
		echo "This is a simple shell script to test your 42 project"
		echo ""
		echo "OPTIONS"
		echo "m, -m	 checks for the mandatory part"
		echo "       [1-9]	executes only that test"
		echo "b, -b	 checks for the bonus part"
		echo "       [1-9]	executes only that test"
		echo "a, -a	 checks for both, mandatory and bonus part"
		echo "c, -c	 removes all the log files"
		echo "e, -e	 changes the paths to the executables"
		echo "       reset		resets the paths to they original"
		echo "       m [new_path]	changes only the path to the mandatory executable"
		echo "       b [new_path]	changes only the path to the bonus executable"
		echo "h, -h, --help	 displays this help page"
		echo ""
		echo "OUTPUT"
		echo "A positive result will be like this:"
		echo "$PURPLE TEST 1:$GREEN Success!$RESET"
		echo "A negative result will be like this:"
		echo "$PURPLE TEST 1:$RED Fail!$RESET"
		echo "The 'Fail!' message colored by$YELLOW yellow$RESET means that you"
		echo "push the project with that test failed, but trust me, there's always"
		echo "a way to upgrade your code."
		exit 0
	;;
	m|-m)
		shift
		ft_check_executables 0
		if [ $# -eq 0 ]; then
			ft_all $P
		elif [ $# -eq 1 ]; then
			ft_do_specific $1 $P
		else
			printf "'m' option expects one or zero arguments\n"
			exit 1
		fi
		exit 0
	;;
	b|-b)
		shift
		ft_check_executables 1
		if [ $# -eq 0 ]; then
			ft_all $PB
		elif [ $# -eq 1 ]; then
			ft_do_specific $1 $PB
		else
			printf "'b' option expects one or zero arguments\n"
			exit 1
		fi
		exit 0
	;;
	a|-a)
		shift
		ft_check_executables 1
		if ! [ $# -eq 0 ]; then
			printf "'a' option doesn't expect any argument\n"
			exit 1
		fi
		ft_all $P
		ft_all $PB
		exit 0
	;;
	c|-c)
		shift
		if ! [ $# -eq 0 ]; then
			printf "'c' option doesn't expect any argument\n"
			exit 1
		fi
		rm -rf ./log*
	;;
	e|-e)
		shift
		if [ $# -lt 1 ] || [ $# -gt 2 ]; then
			printf "'e' option expects one or two arguments\n"
			exit 1
		elif [ "$1" = "reset" ] && [ "$2" = "" ]; then
			sed -i "3s#.*#P=\"../philo/philo\"#" ./tester 2>/dev/null
			if ! [ $? -eq 0 ]; then
				printf "Unexpected error occurred, try again\n"
				exit 1
			fi
			sed -i "5s#.*#PB=\"../philo_bonus/philo_bonus\"#" ./tester 2>/dev/null
			if ! [ $? -eq 0 ]; then
				printf "Unexpected error occurred, try again\n"
				exit 1
			else
				printf "Executables paths set to factory settings\n"
				exit 0
			fi
		elif [ "$1" = "m" ] && ! [ "$2" = "" ]; then
			sed -i "3s#.*#P=\"$2\"#" ./tester 2>/dev/null
			if ! [ $? -eq 0 ]; then
				printf "Unexpected error occurred, try again\n"
				exit 1
			else
				printf "Mandatory executable path set to '$2'\n"
				exit 0
			fi
		elif [ "$1" = "b" ] && ! [ "$2" = "" ]; then
			sed -i "5s#.*#PB=\"$2\"#" ./tester 2>/dev/null
			if ! [ $? -eq 0 ]; then
				printf "Unexpected error occurred, try again\n"
				exit 1
			else
				printf "Bonus executable path set to '$2'\n"
				exit 0
			fi
		else
			printf "Invalid arguments\n"
			exit 1
		fi
	;;
	"")
		printf "Try with './tester --help'\n"
		exit 1
	;;
	*)
		printf "'$1' invalid option\n"
		printf "Try with './tester --help'\n"
		exit 1
	;;
esac
